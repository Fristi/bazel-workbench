bazel_dep(name = "aspect_bazel_lib", version = "2.16.0")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_scala", version = "7.0.0")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_rust", version = "0.61.0")
bazel_dep(name = "toolchains_musl", version = "0.1.20", dev_dependency = True)


## OCI images

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "eclipse_temurin_jre_21",
    image = "docker.io/library/eclipse-temurin",
    tag = "21-jre-alpine-3.21",
    platforms = ["linux/amd64", "linux/arm64/v8"],
)
oci.pull(
    name = "alpine",
    image = "docker.io/library/alpine",
    tag = "3.21.3",
    platforms = ["linux/amd64", "linux/arm64/v8"],
)
use_repo(oci, "eclipse_temurin_jre_21","eclipse_temurin_jre_21_linux_amd64", "eclipse_temurin_jre_21_linux_arm64_v8", "alpine", "alpine_linux_amd64", "alpine_linux_arm64_v8")

## Rust
RUST_EDITION = "2024"
RUST_VERSION = "1.85.0"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    versions = [RUST_VERSION],
)

# This overrides a default rust_repository_set created by rust_register_toolchain.
# It must be named exactly this.
# Each exec triple needs one of these calls per target triple it supports.
# The first call needs all of the attrs, the subsequent calls should only set name, target_triple, and target_compatible_with.
rust.repository_set(
    name = "rust_linux_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-unknown-linux-gnu",
    target_compatible_with = [
        "@//linker_config:unknown",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-gnu",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_linux_x86_64",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)
rust.repository_set(
    name = "rust_linux_x86_64",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
)

# We don't need to register a repository_set for exec_triple == target_triple if we're not customising it in any way:
# one will get registered by default.
# But we do for the Linux case above, because we want to add the "@//linker_config:unknown" constraint in that case.
rust.repository_set(
    name = "rust_darwin_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-apple-darwin",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_darwin_x86_64",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)
rust.repository_set(
    name = "rust_darwin_aarch64",
    edition = RUST_EDITION,
    exec_triple = "aarch64-apple-darwin",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_darwin_aarch64",
    target_compatible_with = [
        "@//linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.spec(package = "serde", features = ["derive"], version = "1.0.219")
crate.spec(package = "serde_json", version = "1.0.140")
crate.from_specs()

use_repo(crate, "crates")

toolchains_musl = use_extension("@toolchains_musl//:toolchains_musl.bzl", "toolchains_musl", dev_dependency = True)
toolchains_musl.config(
    extra_target_compatible_with = ["@//linker_config:musl"],
)

## Scala

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_deps.settings(
    fetch_sources = True,
)
scala_deps.scala()
scala_deps.junit()

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(
    scala_version = "3.7.0",
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

maven.install(
    artifacts = [
        "org.http4s:http4s-ember-server_3:0.23.30",
        "dev.zio:zio_3:2.1.18",
        "dev.zio:zio-json_3:0.7.43",
        "dev.zio:zio-config_3:4.0.4",
        "dev.zio:zio-config-magnolia_3:4.0.4",
        "org.tpolecat:natchez-core_3:0.3.8",
        "org.tpolecat:natchez-noop_3:0.3.8",
        "dev.zio:zio-streams_3:2.1.18",
        "dev.zio:zio-interop-cats_3:3.1.1.0",
        "dev.zio:zio-test-junit_3:2.1.18",
        "org.tpolecat:skunk-core_3:0.6.4",
        "com.softwaremill.sttp.tapir:tapir-core_3:1.11.29",
        "com.softwaremill.sttp.tapir:tapir-http4s-server-zio_3:1.11.29",
        "com.softwaremill.sttp.tapir:tapir-json-zio_3:1.11.29",
        "com.softwaremill.sttp.tapir:tapir-swagger-ui-bundle_3:1.11.29"
    ],
    repositories = [
        "https://repo1.maven.org/maven2",
    ],
    strict_visibility = True
)

use_repo(maven, "maven")
use_repo(scala_deps, "rules_scala_toolchains")

register_toolchains("//toolchains:custom_scala_toolchain")

